name: Security Analysis

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scan daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: Restore dependencies
      run: dotnet restore SF-Server/SF-Server.csproj
      
    - name: Run security analysis
      run: |
        echo "=== Security Analysis Report ===" | tee security-report.txt
        echo "Generated: $(date)" | tee -a security-report.txt
        echo "" | tee -a security-report.txt
        
        # Check for vulnerable packages
        echo "🔍 Checking for vulnerable NuGet packages..." | tee -a security-report.txt
        cd SF-Server && dotnet list package --vulnerable --include-transitive 2>&1 | tee -a ../security-report.txt || echo "No vulnerable packages found" | tee -a ../security-report.txt
        cd ..
        echo "" | tee -a security-report.txt
        
        # Build with security analyzers
        echo "🔒 Running static security analysis..." | tee -a security-report.txt
        dotnet build SF-Server/SF-Server.csproj \
          --configuration Release \
          --no-restore \
          --verbosity normal \
          --property EnableNETAnalyzers=true \
          --property AnalysisLevel=latest \
          --property AnalysisMode=All \
          2>&1 | grep -E "(CA[0-9]{4}|SecurityCodeScan|S[0-9]{4})" | tee -a security-report.txt || echo "No security warnings found" | tee -a security-report.txt
          
    - name: Check for hardcoded secrets
      run: |
        echo "" | tee -a security-report.txt
        echo "🔑 Scanning for potential hardcoded secrets..." | tee -a security-report.txt
        
        # Enhanced secret detection patterns
        echo "Checking for API keys..." | tee -a security-report.txt
        grep -r -n -E "(api[_-]?key|apikey|secret[_-]?key)" SF-Server/ --include="*.cs" || echo "No API key patterns found" | tee -a security-report.txt
        
        echo "Checking for tokens and passwords..." | tee -a security-report.txt
        grep -r -n -E "(token|password|pass)" SF-Server/ --include="*.cs" | grep -v "// " | head -5 || echo "No suspicious token patterns found" | tee -a security-report.txt
        
        echo "Checking for Steam Web API keys..." | tee -a security-report.txt
        grep -r -n -E "([A-F0-9]{32}|[a-f0-9]{32})" SF-Server/ --include="*.cs" | grep -v "SteamId\|Id64\|//\|comment" || echo "No hardcoded Steam API key patterns found" | tee -a security-report.txt
        
        echo "Checking for connection strings..." | tee -a security-report.txt
        grep -r -n -E "(connectionstring|server=|database=|uid=|password=)" SF-Server/ --include="*.cs" || echo "No connection string patterns found" | tee -a security-report.txt
        
        echo "Checking for private keys..." | tee -a security-report.txt
        grep -r -n -E "(BEGIN.*PRIVATE.*KEY|private.*key)" SF-Server/ --include="*.cs" || echo "No private key patterns found" | tee -a security-report.txt
        
        echo "Checking for authentication headers..." | tee -a security-report.txt
        grep -r -n -E "(authorization:|bearer |basic )" SF-Server/ --include="*.cs" || echo "No authentication header patterns found" | tee -a security-report.txt
        
    - name: Analyze dependencies
      run: |
        echo "" | tee -a security-report.txt
        echo "📦 Dependency Analysis..." | tee -a security-report.txt
        cd SF-Server && dotnet list package | tee -a ../security-report.txt
        cd ..
        
    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-analysis-report
        path: security-report.txt
        
    - name: Fail on critical vulnerabilities
      run: |
        # Check if any critical vulnerabilities were found
        if grep -q "Critical" security-report.txt; then
          echo "❌ Critical security vulnerabilities found!"
          exit 1
        else
          echo "✅ No critical security vulnerabilities detected"
        fi

  code-analysis:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: Restore dependencies
      run: dotnet restore SF-Server/SF-Server.csproj
      
    - name: Run comprehensive analysis
      run: |
        echo "=== Code Analysis Report ===" | tee code-analysis.txt
        echo "Generated: $(date)" | tee -a code-analysis.txt
        echo "" | tee -a code-analysis.txt
        
        # Build with all analyzers and capture output in SARIF-compatible format
        dotnet build SF-Server/SF-Server.csproj \
          --configuration Release \
          --no-restore \
          --verbosity diagnostic \
          --property RunAnalysis=true \
          --property EnableNETAnalyzers=true \
          --property AnalysisLevel=latest \
          --property AnalysisMode=All \
          2>&1 | tee build-full.log
          
        # Summary of issues
        echo "📊 Analysis Summary:" | tee -a code-analysis.txt
        echo "Total warnings: $(grep -c 'warning' build-full.log || echo 0)" | tee -a code-analysis.txt
        echo "Total errors: $(grep -c 'error' build-full.log || echo 0)" | tee -a code-analysis.txt
        echo "Security warnings (CA rules): $(grep -c 'CA[0-9][0-9][0-9][0-9]' build-full.log || echo 0)" | tee -a code-analysis.txt
        echo "SonarAnalyzer warnings (S rules): $(grep -c 'S[0-9][0-9][0-9][0-9]' build-full.log || echo 0)" | tee -a code-analysis.txt
        echo "" | tee -a code-analysis.txt
        
        # High priority security issues
        echo "🚨 High Priority Security Issues:" | tee -a code-analysis.txt
        grep -E "(CA5[0-9][0-9][0-9]|CA2[0-9][0-9][0-9]|SecurityCodeScan)" build-full.log | head -20 || echo "None found" | tee -a code-analysis.txt
        
        # Create simplified SARIF output for security issues
        echo "Creating SARIF security report..." | tee -a code-analysis.txt
        cat > security-results.sarif << 'EOF'
        {
          "version": "2.1.0",
          "$schema": "https://json.schemastore.org/sarif-2.1.0.json",
          "runs": [
            {
              "tool": {
                "driver": {
                  "name": "SF-Server Security Analysis",
                  "version": "1.0.0",
                  "informationUri": "https://github.com/darkace1998/SF-Server-And-Client"
                }
              },
              "results": []
            }
          ]
        }
        EOF
        
    - name: Upload code analysis results
      uses: actions/upload-artifact@v4
      with:
        name: code-analysis-full-report
        path: |
          code-analysis.txt
          build-full.log
          security-results.sarif
          
    - name: Upload SARIF results to GitHub Security
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: security-results.sarif
        category: "static-analysis"
      continue-on-error: true