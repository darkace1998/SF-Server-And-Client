name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        default: '1.0.0'
      prerelease:
        description: 'Mark as pre-release'
        type: boolean
        required: false
        default: false

env:
  DOTNET_VERSION: '8.0.x'

jobs:
  build-server:
    name: Build Server
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Determine version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/v}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Building version: $VERSION"
        
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Restore dependencies
      run: dotnet restore SF-Server/SF-Server.csproj
      
    - name: Build and test
      run: |
        dotnet build SF-Server/SF-Server.csproj \
          --configuration Release \
          --no-restore
          
    - name: Build Linux x64
      run: |
        dotnet publish SF-Server/SF-Server.csproj \
          --configuration Release \
          --runtime linux-x64 \
          --self-contained true \
          --output releases/server/linux-x64 \
          /p:PublishSingleFile=true \
          /p:IncludeNativeLibrariesForSelfExtract=true \
          /p:Version=${{ steps.version.outputs.version }}
          
    - name: Build Windows x64
      run: |
        dotnet publish SF-Server/SF-Server.csproj \
          --configuration Release \
          --runtime win-x64 \
          --self-contained true \
          --output releases/server/windows-x64 \
          /p:PublishSingleFile=true \
          /p:IncludeNativeLibrariesForSelfExtract=true \
          /p:Version=${{ steps.version.outputs.version }}
          
    - name: Build macOS x64
      run: |
        dotnet publish SF-Server/SF-Server.csproj \
          --configuration Release \
          --runtime osx-x64 \
          --self-contained true \
          --output releases/server/macos-x64 \
          /p:PublishSingleFile=true \
          /p:IncludeNativeLibrariesForSelfExtract=true \
          /p:Version=${{ steps.version.outputs.version }}
          
    - name: Build macOS ARM64
      run: |
        dotnet publish SF-Server/SF-Server.csproj \
          --configuration Release \
          --runtime osx-arm64 \
          --self-contained true \
          --output releases/server/macos-arm64 \
          /p:PublishSingleFile=true \
          /p:IncludeNativeLibrariesForSelfExtract=true \
          /p:Version=${{ steps.version.outputs.version }}
          
    - name: Create server documentation and scripts
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        SERVER_DIR="releases/server"
        
        # Copy documentation
        cp README.md "$SERVER_DIR/"
        cp CLIENT_SETUP.md "$SERVER_DIR/"
        cp .env.example "$SERVER_DIR/"
        cp docker-compose.yml "$SERVER_DIR/"
        cp Dockerfile "$SERVER_DIR/"
        
        # Create example configuration
        cat > "$SERVER_DIR/server_config.example.json" << 'EOF'
        {
          "Port": 1337,
          "SteamWebApiToken": "YOUR_STEAM_WEB_API_TOKEN_HERE",
          "HostSteamId": 76561198000000000,
          "MaxPlayers": 4,
          "EnableLogging": true,
          "LogPath": "debug_log.txt",
          "AuthDelayMs": 1000,
          "EnableConsoleOutput": true
        }
        EOF
        
        # Create Linux/macOS startup script
        cat > "$SERVER_DIR/start-server.sh" << 'EOF'
        #!/bin/bash
        # SF-Server Startup Script
        
        # Check for configuration
        if [ ! -f "server_config.json" ]; then
            echo "Creating default configuration file..."
            cp server_config.example.json server_config.json
            echo "Please edit server_config.json with your Steam Web API token and Steam ID"
            echo "You can get a Steam Web API key at: https://steamcommunity.com/dev/apikey"
            exit 1
        fi
        
        # Determine platform
        if [[ "$OSTYPE" == "linux-gnu"* ]]; then
            PLATFORM="linux-x64"
        elif [[ "$OSTYPE" == "darwin"* ]]; then
            # Check architecture
            if [[ $(uname -m) == "arm64" ]]; then
                PLATFORM="macos-arm64"
            else
                PLATFORM="macos-x64"
            fi
        else
            echo "Unsupported platform: $OSTYPE"
            exit 1
        fi
        
        # Run the server
        echo "Starting SF-Server..."
        ./${PLATFORM}/SF-Server server_config.json
        EOF
        
        # Create Windows startup script
        cat > "$SERVER_DIR/start-server.bat" << 'EOF'
        @echo off
        REM SF-Server Startup Script for Windows
        
        REM Check for configuration
        if not exist "server_config.json" (
            echo Creating default configuration file...
            copy server_config.example.json server_config.json
            echo Please edit server_config.json with your Steam Web API token and Steam ID
            echo You can get a Steam Web API key at: https://steamcommunity.com/dev/apikey
            pause
            exit /b 1
        )
        
        REM Run the server
        echo Starting SF-Server...
        windows-x64\SF-Server.exe server_config.json
        pause
        EOF
        
        # Make scripts executable
        chmod +x "$SERVER_DIR/start-server.sh"
        chmod +x "$SERVER_DIR/linux-x64/SF-Server"
        chmod +x "$SERVER_DIR/macos-x64/SF-Server"
        chmod +x "$SERVER_DIR/macos-arm64/SF-Server"
        
    - name: Create server release archives
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        cd releases
        
        # Create cross-platform archive
        tar -czf "sf-server-v${VERSION}.tar.gz" server/
        zip -r "sf-server-v${VERSION}.zip" server/
        
        # Create platform-specific archives
        cd server
        tar -czf "../sf-server-linux-x64-v${VERSION}.tar.gz" linux-x64/ *.md *.json *.sh *.yml Dockerfile
        zip -r "../sf-server-windows-x64-v${VERSION}.zip" windows-x64/ *.md *.json *.bat *.yml Dockerfile
        tar -czf "../sf-server-macos-x64-v${VERSION}.tar.gz" macos-x64/ *.md *.json *.sh *.yml Dockerfile
        tar -czf "../sf-server-macos-arm64-v${VERSION}.tar.gz" macos-arm64/ *.md *.json *.sh *.yml Dockerfile
        
    - name: Upload server artifacts
      uses: actions/upload-artifact@v4
      with:
        name: sf-server-v${{ steps.version.outputs.version }}
        path: releases/sf-server-*.tar.gz
        
    - name: Upload server zip artifacts
      uses: actions/upload-artifact@v4
      with:
        name: sf-server-windows-v${{ steps.version.outputs.version }}
        path: releases/sf-server-*.zip

  build-client:
    name: Build Client Plugin
    runs-on: ubuntu-latest
    needs: build-server
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Build client plugin
      run: |
        # Restore dependencies
        dotnet restore SF_Lidgren/SF_Lidgren.csproj
        
        # Build the plugin
        dotnet build SF_Lidgren/SF_Lidgren.csproj --configuration Release --no-restore
        
    - name: Upload client DLL
      uses: actions/upload-artifact@v4
      with:
        name: sf-lidgren-client-v${{ needs.build-server.outputs.version }}
        path: SF_Lidgren/bin/Release/net35/SF_Lidgren.dll

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-server, build-client]
    if: always() && needs.build-server.result == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download server artifacts
      uses: actions/download-artifact@v4
      with:
        name: sf-server-v${{ needs.build-server.outputs.version }}
        path: release-assets/
        
    - name: Download server zip artifacts
      uses: actions/download-artifact@v4
      with:
        name: sf-server-windows-v${{ needs.build-server.outputs.version }}
        path: release-assets/
        
    - name: Download client artifacts
      uses: actions/download-artifact@v4
      with:
        name: sf-lidgren-client-v${{ needs.build-server.outputs.version }}
        path: release-assets/
        continue-on-error: true
        
    - name: Generate release notes
      id: release_notes
      run: |
        VERSION="${{ needs.build-server.outputs.version }}"
        
        cat > release_notes.md << EOF
        # SF-Server and Client Release v${VERSION}
        
        ## 🚀 What's Included
        
        ### Server (SF-Server)
        - **Multi-platform binaries**: Linux x64, Windows x64, macOS x64, macOS ARM64
        - **Self-contained executables**: No .NET runtime installation required
        - **Complete setup package**: Configuration templates, startup scripts, and documentation
        - **Docker support**: Included Dockerfile and docker-compose.yml
        
        ### Client Plugin (SF_Lidgren)
        - **Ready-to-use DLL**: Pre-built SF_Lidgren.dll for direct installation
        - **BepInEx compatible**: Drop-in plugin for BepInEx 5.x
        
        ## 📦 Download Options
        
        ### Server Downloads
        - **sf-server-v${VERSION}.tar.gz**: Complete cross-platform package (Linux/macOS)
        - **sf-server-v${VERSION}.zip**: Complete cross-platform package (Windows)
        - **sf-server-linux-x64-v${VERSION}.tar.gz**: Linux-specific package
        - **sf-server-windows-x64-v${VERSION}.zip**: Windows-specific package  
        - **sf-server-macos-x64-v${VERSION}.tar.gz**: macOS Intel package
        - **sf-server-macos-arm64-v${VERSION}.tar.gz**: macOS Apple Silicon package
        
        ### Client Downloads
        - **sf-lidgren-client-v${VERSION}.dll**: Ready-to-use BepInEx plugin DLL
        
        ## 🛠️ Quick Start
        
        ### Server Setup
        1. Download the appropriate server package for your platform
        2. Extract the archive
        3. Copy \`server_config.example.json\` to \`server_config.json\`
        4. Edit the config with your Steam Web API token and Steam ID
        5. Run \`start-server.sh\` (Linux/macOS) or \`start-server.bat\` (Windows)
        
        ### Client Plugin Setup
        1. Download SF_Lidgren.dll
        2. Install BepInEx 5.x in your Stick Fight game directory
        3. Copy SF_Lidgren.dll to the \`BepInEx/plugins/\` folder
        4. Launch Stick Fight: The Game
        
        ## 🔧 Requirements
        
        ### Server
        - No dependencies (self-contained executables)
        - Steam Web API key (free from Steam)
        - Network access for Steam authentication
        
        ### Client Plugin
        - BepInEx 5.x installed in Stick Fight: The Game
        - No additional dependencies required
        
        ## 📋 Release Notes
        
        - Built with .NET 8.0 for optimal performance and security
        - Comprehensive security analysis and code quality checks
        - Multi-platform support including Apple Silicon
        - Enhanced documentation and setup guides
        - Docker containerization support
        
        For detailed setup instructions, see the included documentation files.
        EOF
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.event_name == 'workflow_dispatch' && format('v{0}', github.event.inputs.version) || github.ref_name }}
        name: Release v${{ needs.build-server.outputs.version }}
        body_path: release_notes.md
        prerelease: ${{ github.event.inputs.prerelease == 'true' }}
        files: |
          release-assets/*
        token: ${{ secrets.GITHUB_TOKEN }}